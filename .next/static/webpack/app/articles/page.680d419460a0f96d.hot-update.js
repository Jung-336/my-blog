"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/articles/page",{

/***/ "(app-pages-browser)/./src/lib/posts.ts":
/*!**************************!*\
  !*** ./src/lib/posts.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createBulkTestPosts: () => (/* binding */ createBulkTestPosts),\n/* harmony export */   createPost: () => (/* binding */ createPost),\n/* harmony export */   createTestPosts: () => (/* binding */ createTestPosts),\n/* harmony export */   deletePost: () => (/* binding */ deletePost),\n/* harmony export */   getAdjacentPosts: () => (/* binding */ getAdjacentPosts),\n/* harmony export */   getHashtags: () => (/* binding */ getHashtags),\n/* harmony export */   getPost: () => (/* binding */ getPost),\n/* harmony export */   getPostWithHashtags: () => (/* binding */ getPostWithHashtags),\n/* harmony export */   getPosts: () => (/* binding */ getPosts),\n/* harmony export */   togglePublish: () => (/* binding */ togglePublish),\n/* harmony export */   updatePost: () => (/* binding */ updatePost)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n\nconst categories = [\n    'AI란 무엇인가',\n    '머신러닝 기초',\n    '딥러닝 기초',\n    '데이터 과학과 AI',\n    'AI 최신 뉴스 및 동향',\n    'AI 관련 주요 용어 해설',\n    'AI 분야별 전문가 인터뷰',\n    'AI 컨퍼런스/세미나 후기',\n    'LLM의 이해',\n    '주요 LLM 모델 비교 분석',\n    'LLM 학습 방법론',\n    '프롬프트 엔지니어링',\n    'LLM의 한계와 도전 과제',\n    'RAG 심층 분석',\n    'LLM 기반 에이전트',\n    'LLM 평가 지표 및 방법',\n    '오픈소스 LLM 생태계',\n    'LLM 경량화 및 최적화 기술',\n    'LMM의 이해',\n    'LMM의 작동 원리 및 아키텍처',\n    '주요 LMM 모델 소개',\n    'LMM 학습 데이터셋 및 구축',\n    'LMM과 LLM의 차이점 및 연관성',\n    '멀티모달 데이터 처리 기술',\n    'LMM의 시각 정보 이해',\n    'LMM의 음성/오디오 처리',\n    '챗봇 및 가상 비서',\n    '콘텐츠 생성',\n    '코드 생성 및 개발 지원',\n    '이미지 생성 및 편집',\n    '음성 인식 및 합성',\n    '영상 분석 및 생성',\n    '의료 분야 AI 활용',\n    '금융 분야 AI 활용',\n    '교육 분야 AI 활용',\n    '예술 및 창작 분야 AI',\n    '제조 및 스마트 팩토리',\n    '자율주행 기술과 AI',\n    '고객 서비스 혁신',\n    '검색 엔진의 미래',\n    'AI 모델 개발 파이프라인',\n    'MLOps',\n    'AI 개발 도구 및 프레임워크',\n    '클라우드 AI 플랫폼 활용',\n    'AI 모델 배포 및 서빙',\n    '데이터 전처리 및 증강',\n    'AI 반도체 및 하드웨어',\n    'AI 윤리 및 책임감 있는 AI',\n    'AI 편향성 및 공정성 문제',\n    'AI 규제 및 법적 문제',\n    'AI와 일자리 변화',\n    'AI 저작권 및 지적 재산권',\n    '설명 가능한 AI',\n    'AI 보안 및 프라이버시',\n    'AGI를 향한 여정',\n    'AI가 바꿀 미래 사회 모습',\n    'AI/LLM/LMM 학습 로드맵',\n    '추천 논문 및 아티클 리뷰',\n    '유용한 온라인 강의 및 튜토리얼',\n    'AI 관련 도서 추천 및 서평',\n    '국내외 AI 커뮤니티 소개'\n];\nconst generateTestPosts = (authorId)=>{\n    const posts = [];\n    const baseDate = new Date();\n    for(let i = 0; i < 100; i++){\n        const date = new Date(baseDate);\n        date.setDate(date.getDate() - i); // Each post is one day older than the previous\n        const category = categories[Math.floor(Math.random() * categories.length)];\n        const title = \"\".concat(category, \" Trends in \").concat(2024 - Math.floor(Math.random() * 5), \": A Comprehensive Guide\");\n        const slug = \"\".concat(category.toLowerCase(), \"-trends-\").concat(2024 - Math.floor(Math.random() * 5), \"-\").concat(i + 1);\n        posts.push({\n            title,\n            excerpt: \"Exploring the latest developments and future prospects in \".concat(category.toLowerCase(), \". This comprehensive guide covers everything you need to know about the current state and future of \").concat(category.toLowerCase(), \".\"),\n            content: \"\\n        <h2>Introduction</h2>\\n        <p>The field of \".concat(category.toLowerCase(), \" is evolving at an unprecedented pace. In this article, we'll explore the latest trends and developments that are shaping the future of this exciting domain.</p>\\n        \\n        <h2>Current State</h2>\\n        <p>As we move through 2024, \").concat(category.toLowerCase(), \" continues to transform industries and create new opportunities. Let's examine the key factors driving this transformation.</p>\\n        \\n        <h2>Key Trends</h2>\\n        <ul>\\n          <li>Trend 1: Innovation in \").concat(category.toLowerCase(), \"</li>\\n          <li>Trend 2: Emerging technologies</li>\\n          <li>Trend 3: Industry applications</li>\\n          <li>Trend 4: Future predictions</li>\\n        </ul>\\n        \\n        <h2>Conclusion</h2>\\n        <p>The future of \").concat(category.toLowerCase(), \" looks promising, with numerous opportunities for growth and innovation. Stay tuned for more updates on this exciting field.</p>\\n      \"),\n            category,\n            slug,\n            published: true,\n            author_id: authorId,\n            created_at: date.toISOString(),\n            updated_at: date.toISOString()\n        });\n    }\n    return posts;\n};\nasync function createBulkTestPosts() {\n    // First, get the current user's ID\n    const { data: { user }, error: userError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n    if (userError || !user) {\n        throw new Error('No authenticated user found');\n    }\n    const testPosts = generateTestPosts(user.id);\n    // Insert posts in batches of 10 to avoid hitting limits\n    const batchSize = 10;\n    const results = [];\n    for(let i = 0; i < testPosts.length; i += batchSize){\n        const batch = testPosts.slice(i, i + batchSize);\n        const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('posts').insert(batch).select();\n        if (error) {\n            console.error('Error creating test posts batch:', error);\n            throw error;\n        }\n        results.push(...data || []);\n        console.log(\"Created batch \".concat(i / batchSize + 1, \" of \").concat(Math.ceil(testPosts.length / batchSize)));\n    }\n    console.log('Created all test posts:', results.length);\n    return results;\n}\nasync function createTestPosts() {\n    // First, get the current user's ID\n    const { data: { user }, error: userError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n    if (userError || !user) {\n        throw new Error('No authenticated user found');\n    }\n    const testPosts = [\n        {\n            title: 'The Future of AI: A New Era of Innovation',\n            excerpt: 'Exploring the latest developments in artificial intelligence and their impact on our future.',\n            content: '<p>This is a test post about AI and its future implications.</p>',\n            category: 'AI',\n            slug: 'future-of-ai',\n            published: true,\n            author_id: user.id\n        },\n        {\n            title: 'Building Multi-Agent Systems',\n            excerpt: 'A deep dive into creating intelligent systems that work together to solve complex problems.',\n            content: '<p>This is a test post about multi-agent systems.</p>',\n            category: 'Technology',\n            slug: 'multi-agent-systems',\n            published: true,\n            author_id: user.id\n        },\n        {\n            title: 'The Rise of LLMs',\n            excerpt: 'Understanding how Large Language Models are transforming the way we interact with technology.',\n            content: '<p>This is a test post about Large Language Models.</p>',\n            category: 'AI',\n            slug: 'rise-of-llms',\n            published: true,\n            author_id: user.id\n        }\n    ];\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('posts').insert(testPosts).select();\n    if (error) {\n        console.error('Error creating test posts:', error);\n        throw error;\n    }\n    console.log('Created test posts:', data);\n    return data;\n}\nasync function createPost(post) {\n    let hashtagIds = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    const { data: postData, error: postError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('posts').insert([\n        post\n    ]).select().single();\n    if (postError) {\n        throw postError;\n    }\n    if (hashtagIds.length > 0) {\n        const { error: hashtagError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('posts_hashtags').insert(hashtagIds.map((hashtagId)=>({\n                post_id: postData.id,\n                hashtag_id: hashtagId\n            })));\n        if (hashtagError) {\n            throw hashtagError;\n        }\n    }\n    return postData;\n}\nasync function updatePost(id, post) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('posts').update(post).eq('id', id).select().single();\n    if (error) {\n        throw error;\n    }\n    return data;\n}\nasync function deletePost(id) {\n    const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('posts').delete().eq('id', id);\n    if (error) {\n        throw error;\n    }\n}\nasync function getPost(slug) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('posts').select('*').eq('slug', slug).eq('published', true).single();\n    if (error) {\n        throw error;\n    }\n    return data;\n}\nasync function getAdjacentPosts(currentPost) {\n    const { data: prevPost, error: prevError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('posts').select('*').eq('published', true).lt('created_at', currentPost.created_at).order('created_at', {\n        ascending: false\n    }).limit(1).single();\n    const { data: nextPost, error: nextError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('posts').select('*').eq('published', true).gt('created_at', currentPost.created_at).order('created_at', {\n        ascending: true\n    }).limit(1).single();\n    return {\n        prevPost: prevError ? null : prevPost,\n        nextPost: nextError ? null : nextPost\n    };\n}\nasync function getPosts() {\n    let published = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true, page = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, pageSize = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;\n    console.log('Fetching posts with published status:', published);\n    const from = (page - 1) * pageSize;\n    const to = from + pageSize - 1;\n    const { data, error, count } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('posts').select('*', {\n        count: 'exact'\n    }).eq('published', published).order('created_at', {\n        ascending: false\n    }).range(from, to);\n    if (error) {\n        console.error('Error fetching posts:', error);\n        throw error;\n    }\n    console.log('Fetched posts:', data);\n    return {\n        posts: data,\n        totalCount: count || 0,\n        totalPages: Math.ceil((count || 0) / pageSize)\n    };\n}\nasync function togglePublish(id, published) {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('posts').update({\n        published\n    }).eq('id', id).select().single();\n    if (error) {\n        throw error;\n    }\n    return data;\n}\nasync function getHashtags() {\n    const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('hashtags').select('*').order('name');\n    if (error) {\n        throw error;\n    }\n    return data;\n}\nasync function getPostWithHashtags(slug) {\n    const { data: post, error: postError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('posts').select('*').eq('slug', slug).eq('published', true).single();\n    if (postError) {\n        throw postError;\n    }\n    const { data: hashtags, error: hashtagError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from('posts_hashtags').select('hashtag_id, hashtags(*)').eq('post_id', post.id);\n    if (hashtagError) {\n        throw hashtagError;\n    }\n    return {\n        ...post,\n        hashtags: hashtags.map((h)=>h.hashtags)\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/posts.ts\n"));

/***/ })

});